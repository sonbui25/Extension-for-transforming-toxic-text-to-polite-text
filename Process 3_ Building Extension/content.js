// content.js

let typingTimer;  // Bi·∫øn ƒë·ªÉ l∆∞u timer
let doneTypingInterval = 1000;  // 1000ms = 1 gi√¢y tr√¨ ho√£n

// H√†m g·ª≠i y√™u c·∫ßu t·ªõi API v√† nh·∫≠n d·ªØ li·ªáu ph·∫£n h·ªìi
async function convertToPolite(text) {
    try {
        console.log("G·ª≠i y√™u c·∫ßu t·ªõi API v·ªõi d·ªØ li·ªáu:", text);
        const response = await fetch('http://127.0.0.1:8000/predict/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ text: text })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log("D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ API:", data);
        return data.polite;
    } catch (error) {
        console.error("Error calling API:", error);
        alert("C√≥ l·ªói x·∫£y ra khi g·ªçi API. H√£y ki·ªÉm tra console ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt.");
        return text;
    }
}

// H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫≠p xong (v·ªõi debounce)
async function handleInputEvent(target) {
    let originalText = target.value || target.innerText;

    // N·∫øu ng∆∞·ªùi d√πng x√≥a h·∫øt n·ªôi dung, kh√¥ng g·ªçi API
    if (!originalText.trim()) {
        console.log("‚è≥ Ng∆∞·ªùi d√πng ƒë√£ x√≥a h·∫øt n·ªôi dung. Ch·ªù nh·∫≠p l·∫°i...");
        return;
    }

    console.log("‚úèÔ∏è Ph√°t hi·ªán nh·∫≠p li·ªáu:", originalText);

    clearTimeout(typingTimer);
    typingTimer = setTimeout(async function () {
        let politeText = await convertToPolite(originalText);

        // C·∫≠p nh·∫≠t vƒÉn b·∫£n ngay l·∫≠p t·ª©c sau khi API tr·∫£ v·ªÅ
        if (target.tagName === "INPUT" || target.tagName === "TEXTAREA") {
            target.value = politeText;
        } else if (target.isContentEditable) {
            target.innerHTML = politeText; // D√πng innerHTML ƒë·ªÉ tr√°nh Facebook reset
        }

        console.log("üîÑ Chuy·ªÉn ƒë·ªïi th√†nh:", politeText);
    }, doneTypingInterval);
}

// H√†m g·∫Øn s·ª± ki·ªán input cho m·ªôt ph·∫ßn t·ª≠
function attachInputListener(element) {
    if (
        element.tagName === "INPUT" ||
        element.tagName === "TEXTAREA" ||
        element.isContentEditable
    ) {
        element.addEventListener("input", function (event) {
            chrome.storage.sync.get("filterEnabled", function (data) {
                if (data.filterEnabled) {
                    handleInputEvent(event.target);
                }
            });
        });
        console.log("ƒê√£ g·∫Øn s·ª± ki·ªán cho ph·∫ßn t·ª≠:", element);
    }
}

// G·∫Øn s·ª± ki·ªán cho c√°c ph·∫ßn t·ª≠ hi·ªán c√≥
document.querySelectorAll('INPUT, TEXTAREA, [contenteditable="true"]').forEach(attachInputListener);

// S·ª≠ d·ª•ng MutationObserver ƒë·ªÉ theo d√µi DOM thay ƒë·ªïi v√† g·∫Øn s·ª± ki·ªán cho ph·∫ßn t·ª≠ m·ªõi
const observer = new MutationObserver((mutationsList) => {
    for (let mutation of mutationsList) {
        if (mutation.type === "childList" && mutation.addedNodes.length > 0) {
            mutation.addedNodes.forEach(node => {
                if (node.nodeType === Node.ELEMENT_NODE) {
                    attachInputListener(node);
                    node.querySelectorAll('input, textarea, [contenteditable="true"]').forEach(attachInputListener);
                }
            });
        }
    }
});

// Quan s√°t to√†n b·ªô DOM ƒë·ªÉ ph√°t hi·ªán c√°c ph·∫ßn t·ª≠ m·ªõi
observer.observe(document.body, { childList: true, subtree: true });